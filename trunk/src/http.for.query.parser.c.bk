/**
 *    Description:  简单的http解析 
 *        Version:  1.0
 *        Created:  2012年03月04日 21时35分13秒
 *         Author:  zhaigy hontlong@gmail.com
 */
#include <stdlib.h>
#include <malloc.h>
#include <stdio.h>
#include <string.h>
#include <time.h>

#include "http.h"
#include "buffer.h"

#define NEW(type) (type*)malloc(sizeof(type))

void add_time_header( struct buffer *buf ) {
  char date[50];
  struct tm cur;
  struct tm *cur_p;
  time_t t = time( NULL );
  gmtime_r( &t, &cur );
  cur_p = &cur;
  strftime( date, sizeof( date ), "%a, %d %b %Y %H:%M:%S GMT", cur_p);
  buffer_add_printf( buf, "Date: %s\r\n", date );
}

/**
 * parse http request initial line.
 */
static int _parse_init_line( struct http_request *request, char *line ) {
  char *token = strtok( line, " " );
  if( strcmp( token, "GET" ) == 0 ) {
    request->type = HTTP_GET;
  } else if( strcmp( token, "HEAD" ) == 0 ) {
    request->type = HTTP_HEAD;
  } else {
    request->type = HTTP_UNKNOWN;
  }

  /* uri */
  token = strtok( 0, " " );
  request->uri = (char*) malloc( strlen( token ) + 1 );
  strcpy( request->uri, token );

  /* http protocol version */
  token = strtok( 0, " " );
  if( strcmp( token, "HTTP/1.0" ) == 0 ) {
    request->ver.major = 1;
    request->ver.minor = 0;
  } else if( strcmp( token, "HTTP/1.1" ) == 0 ) {
    request->ver.major = 1;
    request->ver.minor = 1;
  } else {
    request->ver.major = 1;
    request->ver.major = 0;
  }

  return 0;
}

/**
 * @param decode_plus_ctl 1=把+转码为空格
 */
char * http_decode_uri(const char *uri, int decode_plus, size_t *size_out) {
  char *ret = malloc(strlen(uri) + 1);
  if (ret == NULL) return (NULL);
  
  decode_plus = !!decode_plus;
  
  int j = 0;
  int length = strlen(uri);
  unsigned i = 0;
  for (; i < length; i++) {
    char c = uri[i];
    if (c == '+' && decode_plus) {
      c = ' ';
    } else if (c == '%' && isdigit(uri[i+1]) && isdigit(uri[i+2])) {
      char tmp[3];
      tmp[0] = uri[i+1];
      tmp[1] = uri[i+2];
      tmp[2] = '\0';
      c = (char)strtol(tmp, NULL, 16);
      i += 2;
    }
    ret[j++] = c;
  }
  ret[j] = '\0';
  
  if (size_out) *size_out = (size_t)j;
  return (ret);
}

static const char uri_chars[256] = {
  /* 0 */
  0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 1, 1, 0,
  1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 0, 0, 0, 0, 0, 0,
  /* 64 */
  0, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 0, 0, 0, 0, 1,
  0, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 0, 0, 0, 1, 0,
  /* 128 */
  0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,
  /* 192 */
  0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,
};

#define CHAR_IS_UNRESERVED(c)   (uri_chars[(unsigned char)(c)])

char * http_encode_uri(const char *uri, size_t len, int space_as_plus) {
  struct buffer *buf = buffer_new();
  if (buf == NULL) return (NULL);

  const char *p, *end;
  char *result;

  if (len >= 0) end = uri+len;
  else end = uri+strlen(uri);

  for (p = uri; p < end; p++) {
    if (CHAR_IS_UNRESERVED(*p)) {
      buffer_add(buf, p, 1);
    } else if (*p == ' ' && space_as_plus) {
      buffer_add(buf, "+", 1);
    } else {
      buffer_add_printf(buf, "%%%02X", (unsigned char)(*p));
    }
  }
  buffer_add(buf, "", 1); /* NUL-terminator. */
  result = malloc(buf->len);
  if (!result) return NULL;
  buffer_remove(buf, result, buf->len);
  buffer_free(buf);

  return (result);
}

struct evhttp_uri {
	char *scheme; /* scheme; e.g http, ftp etc */
	char *userinfo; /* userinfo (typically username:pass), or NULL */
	char *host; /* hostname, IP address, or NULL */
	int port; /* port, or zero */
	char *path; /* path, or "". */
	char *query; /* query, or NULL */
	char *fragment; /* fragment or NULL */
};
struct evhttp_uri *
evhttp_uri_new(void)
{
	struct evhttp_uri *uri = mm_calloc(sizeof(struct evhttp_uri), 1);
	if (uri)
		uri->port = -1;
	return uri;
}

/* Return true of the string starting at s and ending immediately before eos
 * is a valid URI scheme according to RFC3986
 */
static int
scheme_ok(const char *s, const char *eos)
{
	/* scheme = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." ) */
	EVUTIL_ASSERT(eos >= s);
	if (s == eos)
		return 0;
	if (!EVUTIL_ISALPHA(*s))
		return 0;
	while (++s < eos) {
		if (! EVUTIL_ISALNUM(*s) &&
		    *s != '+' && *s != '-' && *s != '.')
			return 0;
	}
	return 1;
}
/* Return true iff [s..eos) is a valid userinfo */
static int
userinfo_ok(const char *s, const char *eos)
{
	while (s < eos) {
		if (CHAR_IS_UNRESERVED(*s) ||
		    strchr(SUBDELIMS, *s) ||
		    *s == ':')
			++s;
		else if (*s == '%' && s+2 < eos &&
		    EVUTIL_ISXDIGIT(s[1]) &&
		    EVUTIL_ISXDIGIT(s[2]))
			s += 3;
		else
			return 0;
	}
	return 1;
}

static int
regname_ok(const char *s, const char *eos)
{
	while (s && s<eos) {
		if (CHAR_IS_UNRESERVED(*s) ||
		    strchr(SUBDELIMS, *s))
			++s;
		else if (*s == '%' &&
		    EVUTIL_ISXDIGIT(s[1]) &&
		    EVUTIL_ISXDIGIT(s[2]))
			s += 3;
		else
			return 0;
	}
	return 1;
}

static int
parse_port(const char *s, const char *eos)
{
	int portnum = 0;
	while (s < eos) {
		if (! EVUTIL_ISDIGIT(*s))
			return -1;
		portnum = (portnum * 10) + (*s - '0');
		if (portnum < 0)
			return -1;
		++s;
	}
	return portnum;
}
/* returns 0 for bad, 1 for ipv6, 2 for IPvFuture */
static int
bracket_addr_ok(const char *s, const char *eos)
{
	if (s + 3 > eos || *s != '[' || *(eos-1) != ']')
		return 0;
	if (s[1] == 'v') {
		/* IPvFuture, or junk.
		   "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )
		 */
		s += 2; /* skip [v */
		--eos;
		if (!EVUTIL_ISXDIGIT(*s)) /*require at least one*/
			return 0;
		while (s < eos && *s != '.') {
			if (EVUTIL_ISXDIGIT(*s))
				++s;
			else
				return 0;
		}
		if (*s != '.')
			return 0;
		++s;
		while (s < eos) {
			if (CHAR_IS_UNRESERVED(*s) ||
			    strchr(SUBDELIMS, *s) ||
			    *s == ':')
				++s;
			else
				return 0;
		}
		return 2;
	} else {
		/* IPv6, or junk */
		char buf[64];
		ev_ssize_t n_chars = eos-s-2;
		struct in6_addr in6;
		if (n_chars >= 64) /* way too long */
			return 0;
		memcpy(buf, s+1, n_chars);
		buf[n_chars]='\0';
		return (evutil_inet_pton(AF_INET6,buf,&in6)==1) ? 1 : 0;
	}
}
static int
parse_authority(struct evhttp_uri *uri, char *s, char *eos)
{
	char *cp, *port;
	EVUTIL_ASSERT(eos);
	if (eos == s) {
		uri->host = mm_strdup("");
		return 0;
	}

	/* Optionally, we start with "userinfo@" */

	cp = strchr(s, '@');
	if (cp && cp < eos) {
		if (! userinfo_ok(s,cp))
			return -1;
		*cp++ = '\0';
		uri->userinfo = mm_strdup(s);
	} else {
		cp = s;
	}
	/* Optionally, we end with ":port" */
	for (port=eos-1; port >= cp && EVUTIL_ISDIGIT(*port); --port)
		;
	if (port >= cp && *port == ':') {
		if (port+1 == eos) /* Leave port unspecified; the RFC allows a
				    * nil port */
			uri->port = -1;
		else if ((uri->port = parse_port(port+1, eos))<0)
			return -1;
		eos = port;
	}
	/* Now, cp..eos holds the "host" port, which can be an IPv4Address,
	 * an IP-Literal, or a reg-name */
	EVUTIL_ASSERT(eos >= cp);
	if (*cp == '[' && eos >= cp+2 && *(eos-1) == ']') {
		/* IPv6address, IP-Literal, or junk. */
		if (! bracket_addr_ok(cp, eos))
			return -1;
	} else {
		/* Make sure the host part is ok. */
		if (! regname_ok(cp,eos)) /* Match IPv4Address or reg-name */
			return -1;
	}
	uri->host = mm_malloc(eos-cp+1);
	memcpy(uri->host, cp, eos-cp);
	uri->host[eos-cp] = '\0';
	return 0;

}

static char *
end_of_authority(char *cp)
{
	while (*cp) {
		if (*cp == '?' || *cp == '#' || *cp == '/')
			return cp;
		++cp;
	}
	return cp;
}

/* Return the character after the longest prefix of 'cp' that matches...
 *   *pchar / "/" if allow_qchars is false, or
 *   *(pchar / "/" / "?") if allow_chars is true.
 */
static char *
end_of_path(char *cp, int allow_qchars)
{
	while (*cp) {
		if (CHAR_IS_UNRESERVED(*cp) ||
		    strchr(SUBDELIMS, *cp) ||
		    *cp == ':' || *cp == '@' || *cp == '/')
			++cp;
		else if (*cp == '%' && EVUTIL_ISXDIGIT(cp[1]) &&
		    EVUTIL_ISXDIGIT(cp[2]))
			cp += 3;
		else if (*cp == '?' && allow_qchars)
			++cp;
		else
			return cp;
	}
	return cp;
}

static int
path_matches_noscheme(const char *cp)
{
	while (*cp) {
		if (*cp == ':')
			return 0;
		else if (*cp == '/')
			return 1;
		++cp;
	}
	return 1;
}
struct evhttp_uri *
evhttp_uri_parse(const char *source_uri)
{
  char *readbuf = NULL, *readp = NULL, *token = NULL, *query = NULL;
  char *path = NULL, *fragment = NULL;
  int got_authority = 0;

  struct evhttp_uri *uri = mm_calloc(1, sizeof(struct evhttp_uri));
  if (uri == NULL) {
    event_err(1, "%s: calloc", __func__);
    goto err;
  }
  uri->port = -1;

  readbuf = mm_strdup(source_uri);
  if (readbuf == NULL) {
    event_err(1, "%s: strdup", __func__);
    goto err;
  }

  readp = readbuf;
  token = NULL;

  /* We try to follow RFC3986 here as much as we can, and match
     the productions

     URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]

     relative-ref  = relative-part [ "?" query ] [ "#" fragment ]

*/

  /* 1. scheme: */
  token = strchr(readp, ':');
  if (token && scheme_ok(readp,token)) {
    *token = '\0';
    uri->scheme = mm_strdup(readp);

    readp = token+1; /* eat : */
  }

  /* 2. Optionally, "//" then an 'authority' part. */
  if (readp[0]=='/' && readp[1] == '/') {
    char *authority;
    readp += 2;
    authority = readp;
    path = end_of_authority(readp);
    if (parse_authority(uri, authority, path) < 0)
    goto err;
    readp = path;
    got_authority = 1;
  }

  /* 3. Query: path-abempty, path-absolute, path-rootless, or path-empty
  */
  path = readp;
  readp = end_of_path(path, 0);

  /* Query */
  if (*readp == '?') {
    *readp = '\0';
    ++readp;
    query = readp;
    readp = end_of_path(readp, 1);
  }
  /* fragment */
  if (*readp == '#') {
    *readp = '\0';
    ++readp;
    fragment = readp;
    readp = end_of_path(readp, 1);
  }
  if (*readp != '\0') {
    goto err;
  }

  /* These next two cases may be unreachable; I'm leaving them
   * in to be defensive. */
  /* If you didn't get an authority, the path can't begin with "//" */
  if (!got_authority && path[0]=='/' && path[1]=='/')
  goto err;
  /* If you did get an authority, the path must begin with "/" or be
   * empty. */
  if (got_authority && path[0] != '/' && path[0] != '\0')
  goto err;
  /* (End of maybe-unreachable cases) */

  /* If there was no scheme, the first part of the path (if any) must
   * have no colon in it. */
  if (! uri->scheme && !path_matches_noscheme(path))
  goto err;

  EVUTIL_ASSERT(path);
  uri->path = mm_strdup(path);

  if (query)
  uri->query = mm_strdup(query);
  if (fragment)
  uri->fragment = mm_strdup(fragment);

  mm_free(readbuf);

  return uri;
err:
  if (uri)
  evhttp_uri_free(uri);
  if (readbuf)
  mm_free(readbuf);
  return NULL;
}
static int
evhttp_parse_query_impl(const char *str, struct evkeyvalq *headers,
      int is_whole_uri)
{
  char *line=NULL;
  char *argument;
  char *p;
  const char *query_part;
  int result = -1;
  struct evhttp_uri *uri=NULL;

  TAILQ_INIT(headers);

  if (is_whole_uri) {
    uri = evhttp_uri_parse(str);
    if (!uri)
    goto error;
    query_part = evhttp_uri_get_query(uri);
  } else {
    query_part = str;
  }

  /* No arguments - we are done */
  if (!query_part || !strlen(query_part)) {
    result = 0;
    goto done;
  }

  if ((line = mm_strdup(query_part)) == NULL) {
    event_warn("%s: strdup", __func__);
    goto error;
  }

  p = argument = line;
  while (p != NULL && *p != '\0') {
    char *key, *value, *decoded_value;
    argument = strsep(&p, "&");

    value = argument;
    key = strsep(&value, "=");
    if (value == NULL || *key == '\0') {
      goto error;
    }

    if ((decoded_value = mm_malloc(strlen(value) + 1)) == NULL) {
      event_warn("%s: mm_malloc", __func__);
      goto error;
    }
    evhttp_decode_uri_internal(value, strlen(value),
          decoded_value, 1 /*always_decode_plus*/);
    event_debug(("Query Param: %s -> %s\n", key, decoded_value));
    evhttp_add_header_internal(headers, key, decoded_value);
    mm_free(decoded_value);
  }

  result = 0;
  goto done;
error:
  evhttp_clear_headers(headers);
done:
  if (line)
  mm_free(line);
  if (uri)
  evhttp_uri_free(uri);
  return result;
}

int
evhttp_parse_query(const char *uri, struct evkeyvalq *headers)
{
  return evhttp_parse_query_impl(uri, headers, 1);
}
int
evhttp_parse_query_str(const char *uri, struct evkeyvalq *headers)
{
  return evhttp_parse_query_impl(uri, headers, 0);
}
/**
 * add response headers
 */
static void _add_headers( struct http_header_head *headers, const char *name,
      const char *value ) {
  struct http_header *header = NEW( struct http_header );
  header->name = (char*) malloc( strlen( name ) + 1 );
  header->value = (char*) malloc( strlen( value ) + 1 );
  strcpy( header->name, name );
  strcpy( header->value, value );

  TAILQ_INSERT_TAIL( headers, header, next );
}

struct http_header_head *http_header_new() {
  struct http_header_head *queue = NEW( struct http_header_head );
  if( queue == 0 ) return 0;
  TAILQ_INIT( queue );
  return queue;
}

void http_header_free( struct http_header_head *header_queue ) {
  struct http_header *header, *prev = 0;
  TAILQ_FOREACH( header, header_queue, next ) {
    if( prev != 0 ) free( prev );
    free( header->name );
    free( header->value );
    prev = header;
  }
  free( header_queue );
}

int http_add_header( struct http_header_head *header_queue, char *line ) {
  char *value ;
  char *name = strchr( line, ':' );
  struct http_header *header = NEW( struct http_header );
  header->name = (char*) malloc( name - line + 1 );
  strncpy( header->name, line, name - line );
  header->name[name-line] = '\0';

  for( value = name + 1; *value == ' '; ++ value ) {
    ;
  }

  header->value = (char*) malloc( strlen( line ) - ( value - line ) + 1 );
  strcpy( header->value, value );
  TAILQ_INSERT_TAIL( header_queue, header, next );

  return 0;
}

const char *http_get_header_value( struct http_header_head *header_queue,
      const char *header_name ) {
  struct http_header *header;
  TAILQ_FOREACH( header, header_queue, next ) {
    if( strcmp( header->name, header_name ) == 0 ) return header->value;
  }
  return 0;
}

// NULL=失败
struct http_request *http_request_parse( struct buffer *buf ) {
  struct http_request *request = NEW( struct http_request );
  if( request == NULL ) return NULL;

  {
    // 请求行处理 
    char *line = buffer_readline( buf );
    if (line == NULL) return NULL;
    int ret = _parse_init_line( request, line );
    free( line );
    if( ret != NULL ) {
      free( request );
      return NULL;
    }
  }

  request->headers = http_header_new();
  // parse headers 
  char *line = buffer_readline( buf ) ;
  int ret = NULL;
  // 头和Body之间有一个空行
  while( line != NULL && *line != '\0' ) {
    ret = http_add_header( request->headers, line );
    free( line );
    if( ret != NULL ) break;
    line = buffer_readline( buf );
  }
  // 忽略body数据，现在还不支持
  return request;
}

void http_request_free( struct http_request *request ) {
  free( request->uri );
  http_header_free( request->headers );
  free( request );
}

